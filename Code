# Step 1. Import the necessary libraries
import streamlit as st
import pandas as pd

# Step 2. Import the dataset from the datasheet.
# Function to load the dataset
@st.cache_data  # Cache the function to enhance performance
def load_data():
    # Define the file path
    file_path = 'https://raw.githubusercontent.com/aaubs/ds-master/main/data/assignments_datasets/KIVA/kiva_mpi_region_locations.csv'
    # Read the CSV file into a DataFrame
    df = pd.read_csv(file_path)
    if 'loan_amount' in df.columns and 'loan_term' in df.columns:
        df['LoanLengthMonths'] = df['loan_term'] / 30  # Assuming loan_term is in days
    return df

# Load the data
df = load_data()

# Display the updated DataFrame with new columns
st.write(df.head())

# Check if df is None before proceeding
if df is not None:
    # Set the app title and sidebar header
    st.title("Kiva Microfinance Regional Locations Dashboard 🌍💰")
    st.sidebar.header("Filter Options 📊")

    # Sidebar filter: Region
    selected_region = st.sidebar.multiselect("Select Regions 🌍", df['region'].unique().tolist(), default=df['region'].unique().tolist())
    if not selected_region:
        st.warning("Please select at least one region from the sidebar ⚠️")
        st.stop()

    # Sidebar filter: Country
    countries = df['country'].unique().tolist()  # Adjust the column name as needed
    selected_country = st.sidebar.multiselect("Select Countries 🌍", countries, default=countries)
    if not selected_country:
        st.warning("Please select at least one country from the sidebar ⚠️")
        st.stop()

    # Filter the DataFrame based on selections
    filtered_df = df[
        df['region'].isin(selected_region) &
        df['country'].isin(selected_country)
    ]

    # Display the filtered data
    st.write(filtered_df)

    # Displaying the Loan Performance Analysis header
    st.header("Loan Performance Analysis 📊")

    # Example: Displaying the MPI (Multidimensional Poverty Index) by region
    st.subheader("MPI by Region")
    if 'MPI' in df.columns:
        mpi_by_region = df.groupby('region')['MPI'].mean().reset_index()
        st.bar_chart(mpi_by_region.set_index('region'))
    else:
        st.warning("The 'MPI' column is not available in the dataset.")

    # Additional analysis and visualizations...
else:
    st.write("No data available to display.")

# Display dataset overview
st.header("Dataset Overview")
st.dataframe(df.describe())  # Display a summary of the dataset
